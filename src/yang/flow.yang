module flow {
  namespace "http://com/example/flow";
  prefix flow;

  import ietf-inet-types {
    prefix inet;
  }
  import tailf-common {
    prefix tailf;
  }
  import tailf-ncs {
    prefix ncs;
  }

  augment /ncs:services {
    list flow {
      description "This is an RFS skeleton service";

      key name;
      leaf name {
        tailf:info "Unique service id";
        tailf:cli-allow-range;
        type string;
      }

      /*
      // may replace this with other ways of refering to the devices.
      leaf-list device {
        type leafref {
          path "/ncs:devices/ncs:device/ncs:name";
        }
      }*/

      container graphImport{
        list graph{
          uses ncs:service-data;
          ncs:servicepoint "graphImport-servicepoint";
          key "graphName";
          leaf graphName{type string;}
          leaf nodeNum{type uint32;}
          leaf edge_num{type uint32;}
          list nodeInfo{
            key "deviceID";
            leaf deviceID{type uint32;}
            leaf deviceName{type string;}
          }
          list edge{
            key "souDevice desDevice";
            leaf souDevice{type uint32;}
            leaf desDevice{type uint32;}
          }
        }
      }

      container flowTable{
        list flow{
          uses ncs:service-data;
          ncs:servicepoint "flowTable-servicepoint";
          key "souDevice souPrefix desDevice desPrefix";
          leaf souDevice{type string;}
          leaf souPrefix{type inet:ipv4-address;}
          leaf desDevice{type string;}
          leaf desPrefix{type inet:ipv4-address;}
          leaf pathType{
            type enumeration{
              enum auto;
              enum manual;
              enum optional;
            }
          }
          leaf-list specificPath{
            type string;
            description "Device list of the whole manual path";
          }
          leaf-list optionalPath{
            type string;
            description "The only devices you point out of the optional path";
          }
        }
      }

    }
  }
}
